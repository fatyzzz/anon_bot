from aiogram import Router
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from states.anon_message import AnonMessage
from db.redis_db import get_chat_id, get_chat_owner
from config import logger

router = Router()

@router.message(CommandStart())
async def start(message: Message, state: FSMContext) -> None:
    logger.info(f"Start command from {message.chat.id} with text: {message.text}")
    if len(message.text.split()) > 1:
        unique_code = message.text.split()[1]
        chat_id = await get_chat_id(unique_code)  # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞
        owner_chat_id = await get_chat_owner(unique_code)  # –ß–∞—Ç-—Å—Å—ã–ª–∫–∞
        target_chat_id = owner_chat_id or chat_id
        if target_chat_id:
            await state.update_data(unique_code=unique_code, target_chat_id=target_chat_id)
            await state.set_state(AnonMessage.sending_message)
            current_state = await state.get_state()
            logger.info(f"User {message.chat.id} started sending to {target_chat_id} with code {unique_code}, state: {current_state}")
            await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ.")
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.")
            logger.warning(f"Invalid code {unique_code} from {message.chat.id}")
    else:
        await message.answer(
            "<b>üëã –ü—Ä–∏–≤–µ—Ç!</b>\n\n"
            "–Ø –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "- /getlink ‚Äî –ø–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n"
            "- /chat ‚Äî –Ω–∞—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç\n"
            "- /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞",
            parse_mode="HTML"
        )