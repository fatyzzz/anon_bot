from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states.anon_message import AnonMessage
from db.redis_db import save_chat_link, remove_chat_link, unlock_chat, get_chat_lock, redis_client
from utils.helpers import generate_unique_code
from config import BOT_USERNAME, logger, bot  # Added bot import

router = Router()

@router.message(Command("chat"))
async def start_chat(message: Message, state: FSMContext) -> None:
    owner_chat_id = message.chat.id
    chat_code = generate_unique_code()
    await save_chat_link(chat_code, owner_chat_id)
    await state.set_state(AnonMessage.chatting)
    current_state = await state.get_state()
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è {owner_chat_id}: {current_state}")
    link = f"https://t.me/{BOT_USERNAME}?start={chat_code}"
    await message.answer(
        f"üí¨ <b>–†–µ–∂–∏–º –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç–∞ –≤–∫–ª—é—á—ë–Ω!</b>\n\n"
        f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —á–∞—Ç–∞:\n{link}\n"
        "–ü–µ—Ä–≤—ã–π, –∫—Ç–æ –Ω–∞–ø–∏—à–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç —á–∞—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop_chat.",
        parse_mode="HTML"
    )
    logger.info(f"Chat mode enabled for {owner_chat_id} with link: {link}")

@router.message(Command("stop_chat"), AnonMessage.chatting)
async def stop_chat_in_chat(message: Message, state: FSMContext) -> None:
    chat_id = message.chat.id
    current_state = await state.get_state()
    if current_state != AnonMessage.chatting.state:
        await message.answer("‚ùå –í—ã –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —á–∞—Ç: –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫
    owner_chat_id = chat_id
    chat_code = await redis_client.get(f"chat_owner:{chat_id}")
    if chat_code:  # –≠—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞
        sender_chat_id = await get_chat_lock(chat_id)
        if sender_chat_id:
            await bot.send_message(sender_chat_id, "üõë –ß–∞—Ç –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–ª–∞–¥–µ–ª–µ—Ü –∑–∞–≤–µ—Ä—à–∏–ª —Å–µ—Å—Å–∏—é.", parse_mode="HTML")
        await remove_chat_link(chat_id)
        await unlock_chat(chat_id)
        await state.clear()
        await message.answer("üõë <b>–ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.</b> –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞.", parse_mode="HTML")
        logger.info(f"Chat stopped by owner {chat_id}")
    else:  # –≠—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞
        for key in await redis_client.keys("chat_owner:*"):
            if await redis_client.get(key) == await redis_client.get(f"chat_link:{chat_id}"):
                owner_chat_id = int(key.split(":")[1])
                break
        await unlock_chat(owner_chat_id)
        await state.clear()
        await bot.send_message(owner_chat_id, "üõë –£—á–∞—Å—Ç–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.", parse_mode="HTML")
        await message.answer("üõë –í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞.", parse_mode="HTML")
        logger.info(f"Chat stopped by participant {chat_id}")